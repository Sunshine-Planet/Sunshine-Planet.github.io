{"pages":[{"title":"About","date":"2022-02-08T15:08:39.219Z","path":"about/index.html","text":"KONODIODA!"},{"title":"friends","date":"2022-02-08T14:23:08.609Z","path":"friends/index.html","text":""},{"title":"Categories","date":"2022-02-08T14:23:08.609Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2022-02-08T14:21:43.960Z","path":"tags/index.html","text":""}],"posts":[{"title":"OpenWRT 挂载硬盘并设置网络共享","date":"2022-02-05T11:04:12.000Z","path":"wiki/Linux/OpenWRT/OpenWRT-挂载硬盘并设置网络共享/","text":"123456789101112131415vim /etc/rc.localecho &quot;152d:0578:u&quot; &gt;&gt; /sys/module/usb_storage/parameters/quirkssed -i &#x27;s/usb-storage/usb-storage quirks=152d:0578:u/g&#x27; /etc/modules.d/usb-storageopkg install lsblkopkg install shadow-common shadow-useradduseradd sambasmbpasswd -a sambachown -R samba:samba /media/nassmbpasswd -x sambauserdel samba","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/Linux/"},{"name":"Samba","slug":"Samba","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/Samba/"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/"},{"name":"OpenWRT","slug":"Linux/OpenWRT","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/OpenWRT/"}]},{"title":"Linux & Windows 双系统蓝牙设备共享(包括蓝牙 LE 设备)","date":"2021-12-09T00:30:00.000Z","path":"wiki/Linux/Linux-Windows-双系统蓝牙设备共享-包括蓝牙-LE-设备/","text":"环境 蓝牙设备： 蓝牙4.0 鼠标低功耗蓝牙 4.0 LE 键盘 操作系统 Arch Linux；KDE Plasma 版本： 5.23.5KDE 程序框架版本： 5.90.0内核版本： 5.16.5-arch1-1 (64-位) Windows 10 或 Windows 11 (64-位) 准备 将蓝牙设备与 Linux 系统进行配对, 留下设备信息, 完成后重启系统引导至 Windows 将蓝牙设备与 Windows 系统进行配对, 留下设备信息 获取 Windows 下蓝牙设备信息 在微软官方文档网站下载 PsExec. 我们使用这个工具来获得注册表内蓝牙设备信息 解压 PSTools.zip 压缩包至合适目录下, 如 C:\\Program Files\\PSTools 高级系统设置 - 环境变量 - 系统变量 在 Path 值下添加一个文件路径变量 C:\\Program Files\\PSTools 使用一款终端软件, 如 Windows Terminal ，以管理员身份打开，输入如下命令，将注册表内有关信息导出保存到 C:\\BTKeys.reg 中1psexec -s -i regedit /e C:\\BTKeys.reg HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\BTHPORT\\Parameters\\Keys 复制 C:\\BTKeys.reg 到 Linux 硬盘或 U盘 内 在 Linux 中修改蓝牙配置在 Windows 中获取的 BTKeys.reg 文件格式如下例：命令行下使用 cat 查看文件内容 图形界面下这里使用 Kate 查看文件内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\BTHPORT\\Parameters\\Keys][HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\BTHPORT\\Parameters\\Keys\\ffffffffffff]&quot;MasterIRK&quot;=hex:00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\BTHPORT\\Parameters\\Keys\\ffffffffffff\\00000000000]&quot;LTK&quot;=hex:f3,13,02,86,20,9d,04,12,c0,1e,8e,cb,fb,e9,04,1b&quot;KeyLength&quot;=dword:00000010&quot;ERand&quot;=hex(b):18,57,93,eb,5f,b2,15,2e&quot;EDIV&quot;=dword:0000ecb0&quot;IRK&quot;=hex:a0,8d,5a,98,34,41,31,3f,00,72,c9,f8,95,5f,fa,d5&quot;Address&quot;=hex(b):27,d5,bb,fc,5a,eb,00,00&quot;AddressType&quot;=dword:00000001&quot;CSRK&quot;=hex:bc,70,a8,79,7c,35,9e,9a,3f,0d,d7,f7,70,64,44,a4&quot;OutboundSignCounter&quot;=dword:00000000&quot;MasterIRKStatus&quot;=dword:00000001&quot;AuthReq&quot;=dword:0000002d[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\BTHPORT\\Parameters\\Keys\\ffffffffffff\\1111111111111]&quot;LTK&quot;=hex:88,0f,f4,8d,11,db,33,28,36,54,06,cd,a6,27,a2,64&quot;KeyLength&quot;=dword:00000010&quot;ERand&quot;=hex(b):38,bb,05,08,11,91,f1,8b&quot;EDIV&quot;=dword:0000882b&quot;MasterIRKStatus&quot;=dword:00000001&quot;AuthReq&quot;=dword:0000002d 从含有中括号 [ ] 的行至下一个含有中括号 [ ] 的行前是一个蓝牙设备的配置信息如： 第 9 行 [ …\\Keys\\ffffffffffff] 的 ffffffffffff 就是该主机蓝牙控制器的十六位地址 第 15 行 [ …\\Keys\\ffffffffffff\\000000000000] 的 000000000000 就是一个蓝牙设备的十六位地址，至第 40 行是该设备的配置信息 第 41 行 [ …\\Keys\\ffffffffffff\\1111111111111] 的 1111111111111 就是另一个蓝牙设备的十六位地址，至第 53 行是该设备的配置信息 对应 Linux 下设备蓝牙信息打开 Linux 任一终端，键入命令（以 root 用户身份） 12345678[root@Linux ~]# cd /var/lib/bluetooth/[root@Linux bluetooth]# lsFF:FF:FF:FF:FF:FF // 该文件夹名称对应之前获取的该主机蓝牙控制器的十六位地址[root@Linux bluetooth]# cd FF:FF:FF:FF:FF:FF //键入 cd 后按 Tab 键即可自动补全名称[root@Linux FF:FF:FF:FF:FF:FF]# ls00:00:00:00:00:01 11:11:11:11:11:12 cache settings 文件夹 00:00:00:00:00:01 和 11:11:11:11:11:12 则是 Linux 下两个蓝牙设备的十六位地址（有一位数字的偏差） 修改蓝牙配置文件夹名称我们需要将两个文件夹的名称改为 Windows 下同一设备的地址 如： 00:00:00:00:00:01 -&gt; 00:00:00:00:00:00 11:11:11:11:11:12 -&gt; 11:11:11:11:11:11 1234567[root@Linux FF:FF:FF:FF:FF:FF]# mv 00:00:00:00:00:01 00:00:00:00:00:00[root@Linux FF:FF:FF:FF:FF:FF]# mv 11:11:11:11:11:12 11:11:11:11:11:11[root@Linux FF:FF:FF:FF:FF:FF]# ls00:00:00:00:00:00 11:11:11:11:11:11 cache settings //再次查看文件夹名称确认 查看 Linux 蓝牙配置进入一个蓝牙设备的文件夹，查看 info 文件 1234567[root@Linux FF:FF:FF:FF:FF:FF]# cd 11:11:11:11:11:11[root@Linux 11:11:11:11:11:11]# ls attributes info[root@Linux 11:11:11:11:11:11]# cat info info 文件格式如下例： 12345678910111213141516171819202122232425262728293031323334353637[General]Name=Ergonomic KeyboardAppearance=0x03c1AddressType=staticSupportedTechnologies=LE;Trusted=trueBlocked=falseWakeAllowed=trueServices=00001800-0000-1000-8000-00805f9b34fb;00001801-0000-1000-8000-00805f9b34fb;0000180a-0000-1000-8000-00805f9b34fb;0000180f-0000-1000-8000-00805f9b34fb;00001812-0000-1000-8000-00805f9b34fb;Alias=Ergonomic Keyboard[ConnectionParameters]MinInterval=12MaxInterval=12Latency=20Timeout=200[DeviceID]Source=2Vendor=1118Product=2071Version=308[IdentityResolvingKey]Key=A08D5A983441313F0072C9F8955FFAD5[LocalSignatureKey]Key=BC70A8707C359E9A3F0DD7F770444A04Counter=0Authenticated=true[LongTermKey]Key=F3130286209D0412C01E8ECBFBE9041BAuthenticated=1EncSize=16EDiv=60592Rand=3320756425299547928 配置项中, Linux 下名称和 Windows 下名称对应为 [IdentityResolvingKey] &lt;&#x3D;&gt; “IRK” [LocalSignatureKey] &lt;&#x3D;&gt; “CSRK” [LongTermKey] &lt;&#x3D;&gt; “LTK” EncSize ([LongTermKey]下) &lt;&#x3D;&gt; “KeyLength” EDiv ([LongTermKey]下) &lt;&#x3D;&gt; “EDIV” Rand ([LongTermKey]下) &lt;&#x3D;&gt; “ERand” 对应数值转换使用 BTKeys.reg 内的数值转换后修改对应 info 文件下的数值 “LTK”项 只保留字母数字，且字母小写转大写1echo &quot;f3,13,02,86,20,9d,04,12,c0,1e,8e,cb,fb,e9,04,1b&quot; | tr a-z A-Z | sed &quot;s/[[:punct:]]//g&quot; “KeyLength”项 只保留数字，且十六进制转十进制1echo $((16#00000010)) “ERand”项 只保留字母数字，且以逗号相隔为一组，各组逆序排列后所得十六进制转十进制1echo $((16#2e15b25feb935718)) “EDIV”项 只保留字母数字，且十六进制转十进制1echo $((16#0000ecb0)) “IRK”项 只保留字母数字，且字母小写转大写1echo &quot;a0,8d,5a,98,34,41,31,3f,00,72,c9,f8,95,5f,fa,d5&quot; | tr a-z A-Z | sed &quot;s/[[:punct:]]//g&quot; “CSRK”项 只保留字母数字，且字母小写转大写1echo &quot;bc,70,a8,79,7c,35,9e,9a,3f,0d,d7,f7,70,64,44,a4&quot; | tr a-z A-Z | sed &quot;s/[[:punct:]]//g&quot; 修改蓝牙配置根据上述步骤得到的数值，对应修改 info 文件中的数值 1[root@Linux 11:11:11:11:11:11]# nano info “IRK”的数值需修改 [IdentityResolvingKey] 下一行的 key 同理修改 [LocalSignatureKey] 和 [LongTermKey] EncSize ，EDIV 和 Rand 找到其对应名称修改即可 若未在 BTKeys.reg 的某一设备中发现某一配置，不用着急，找出其存在的配置即可。因为 Linux 下 info 文件里也不需要该未出现的配置 修改完一个蓝牙设备后，进入另外一个目录修改另一个蓝牙设备的 info 文件 123[root@Linux 11:11:11:11:11:11]# cd ../00:00:00:00:00:00[root@Linux 00:00:00:00:00:00]# nano info 重启蓝牙服务修改完毕后，重启蓝牙服务，此时蓝牙设备应该能够正常在 Linux 系统下使用且不用重新配对也能够在重启后引导至 Windows 系统下使用 1systemctl restart bluetooth","tags":[],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/"}]},{"title":"提纲","date":"2021-08-19T16:00:00.000Z","path":"wiki/Linux/OpenWRT/提纲/","text":"openwrt 系统简介Linksys 公司在2002年底推出的一款无线路由器 WRT-54G ，该路由器的固件不开源，但是由于该路由器使用了遵守 GPL 许可证的源代码，Linksys 于2003年7月迫于多方压力开源了 WRT-54G 无线路由器的固件。这便是 openwrt 系统的前身。 openwrt 是一个基于 linux 内核的开源社区发行版。因为其前身是商业公司的无线路由器系统，这使得 openwrt 先天性的拥有商业公司的代码部分，能够被开源社区学习和参考。经过近17年的发展，openwrt 已经成为最流行的开源路由器系统。他的诞生也带来了软路由这一新概念和广阔的蓝海市场。 NAS（Network Attached Storage 网络附加储存）简介现在我们提到的 nas ，由两个部分组成：nas 系统和可以运行 nas 系统的 nas 硬件。nas 的主要功能就是为其连接上的网络的其他计算机提供集中的文件储存功能。在此基础上，nas 还扩展出了 RAID（磁盘阵列） 的功能以便提升性能或资料冗余，或是两者同时提升。nas 的出现解决了人们对多主机文件管理的需求，集中式的文件服务器可以为多平台的主机服务，且便于维护，优化局域网的网络主机结构。 openwrt 编译、安装、和使用openwrt 经过多年的发展，支持的 cpu 架构也越来越多。正应如此，要获得一个可刷写的 openwrt 固件，需要获取 openwrt 的源代码并进行对其编译。通过修改编译配置文件，可以获得适合自己需求的 openwrt 固件。openwrt 的 Web 管理界面采用 LUCI ，在编译中也可以将多种 LUCI 的组件编译进固件，openwrt 中的各种 LUCI 组件提供了一个可视化的功能 Web 管理模式。这也是 openwrt 流行的一个重要原因 — 友好的 Web 管理模式。 编译完成 openwrt 源代码后，可以得到其 img 镜像文件。将 img 文件刷入对应 cpu 架构的主机中即可完成 openwrt 系统的安装。若要访问 openwrt 的 Web 管理界面，使用另一主机连接网线，通过浏览器访问 openwrt 在编译过程中所连接网线指定的 IP 地址（一般为192.168.1.1)，即可出现 Web 管理界面。输入默认用户名和密码后，即可通过 web 界面管理 openwrt 系统。 软路由简介软路由的概念是随着 openwrt 系统的不断发展完善，搭载 openwrt 系统的主机渐渐能够媲美由传统网络通讯厂商所推出的定制硬件搭配定制系统的传统路由器，这些厂商的产品渐渐就被大家称为硬路由。相对的，由用户自己搭配硬件，根据硬件编译适配 openwrt 系统并刷入的主机，就叫做软路由。 软路由的优势在于其 openwrt 系统的底层 linux 内核基本和上游官方 linux 内核保持同步，拥有活跃的开发者社区和 linux 的丰富软件包。软路由可以做到许多传统路由做不到的许多额外功能，例如搭建各种各样协议 vpn 服务器、使用许多域名提供商的 ddns 服务，甚至轻松实现传统路由器的难以实现的许多 linux 服务器才能实现的功能如搭建虚拟机、配置网络文件共享等等。软路由仍然有许多进步的空间，比如在稳定性方面的上如果使用者经验不正确的进行配置的话，那么软路由的稳定性还是要弱于拥有多年专门研究定制硬件、定制系统的传统网络通讯厂商的路由器的。又或者说软路由在无线连接方面因为组成软路由的硬件大多数在无线网卡上面区别很大，在无线连接的速度，稳定性方面还是弱于定制硬件、定制系统的传统路由器。 本项目简介nas 在个人家庭场景下的使用近年来是越来越兴盛，但是也正如传统和创新的路由市场。nas 市场也是有众多品牌 nas ，他们也有着自己的独立封闭的定制硬件、定制系统的 nas 。当然市场上也流行着用户自己搭配硬件的，运行开源 nas 系统的主机，就如个人的路由市场一样。而本项目的目的就是，选择利用一款流行的主机，使用 openwrt 系统在一台设备上搭建家庭网络节点，实现上网功能和使用其他丰富的网络工具，同时利用 openwrt 所提供的软件包和 LUCI 组件，实现 nas 的基本功能，这样使用一台设备，节约开销的同时，带领大家初识开源社区的魅力，了解现在的网络设备新功能。开阔大家的视野和提升个人的计算机能力。","tags":[{"name":"树莓派","slug":"树莓派","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/"},{"name":"OpenWRT","slug":"Linux/OpenWRT","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/OpenWRT/"}]},{"title":"(施工中)Arch Linux个人安装步骤小记","date":"2021-02-24T15:04:42.000Z","path":"wiki/Linux/Arch-Linux个人安装步骤小记/","text":"前言Arch Linux为我目前所使用的 Linux 发行版，我根据自己的实际需求，写出此安装步骤，以系统化学习和方便使用~~面向^C 和^V 的系统安装步骤 XD~~~ Arch Linux 的官方 Wiki 上推荐使用 Live 系统安装 Arch Linux，我也在使用 Arch 的过程中，虽然也了解了那些一键安装脚本，但是。。。 毕竟都用 Arch 了，就要做好折腾的觉悟好吧那么就让我们开始吧！ 官方 Wiki 的安装过程 安装前的准备 安装必须的软件包 配置 Fstab 文件 fstab 文件可用于定义磁盘分区，各种其他块设备或远程文件系统应如何装入文件系统。 说人话就是开机的时候自动挂载硬盘分区 Chroot（切换 root 用户）到已经安装好的系统 设置时区以及本地化 设置 hostname 和 hosts(主机名和 hosts 文件) 设置 Root 用户密码 安装引导程序 安装完成，重启！ 本人设置模块化的引索目录，顺序进行即可正确安装当然你是确定自己需要的步骤自取那就更好了，本来写这篇文章的目的就是这个 hahaha 这里按照我的习惯命名，细分并改变了一下安装顺序，请注意！ 开始安装前的准备下载 iso 格式镜像文件官方下载网站以 U 盘为 Live 环境，使用开源软件Ventory制作Ｕ盘启动盘这里使用 Ventory 的原因有：Ventory 支持多 iso 直接启动，也就意味着不像传统的 iso 文件刻录进 U 盘，可以充分利用 U 盘空间，制作双系统以及多系统系统启动盘，安装盘。 当然这里也可以使用另外一款开源 U 盘刻录软件Rufus 确认主板 bios 模式为传统 bios 或是 UEFI 模式虽是这么说 Linux 能让老电脑焕发第二春，但是对于那种都已经腐烂的电脑，真的还是不推荐安装此系统，毕竟我们安装 Arch Linux 是用来折腾的，（至少对我来说）。对于风烛残年的老电脑来说，还是让他好好休息吧，干活是年轻人的事情。 现在（截止于 2021 年）市面上流通的个人电脑，我们安装系统时推荐使用主板 UEFI 模式+硬盘 GPT 模式。并且 UEFI 模式则需在主板 bios 设置中关闭安全启动这一选项。 1 进入 ArchLinux Live 安装环境这个就比较简单了，选择主板 bios 的启动选项的快捷键还是进如主板 bios 设置修改启动顺序，这些随你的心情，只要选择用 Ventory 制作好的Ｕ盘启动盘就行了。 进入 U 盘后，选择相应的 Arch Linux 镜像，等待跑码，跑码结束后就是进入命令行输入模式了。 配置 Live CD 环境 注意，每条命令，我会做出或多或少的相关解释。而且请注意，我们进入 Live 环境后，是以 root 权限进行操作。所以做出以下约定：以#开头的命令，需以 root 权限运行以%开头的命令，需以普通用户权限运行 123456# Arch Linux的安装需要网络环境，第一步就是连接互联网，这里采用有线网络连接计算机，若想使用无线网络连接计算机，等我慢慢写吧。。。网上都有dhcpcd# 校准本地时间timedatectl set-ntp true 对磁盘进行分区和挂载操作12345678910111213141516171819202122232425262728293031323334353637# 查看磁盘及其分区情况lsblk# 使用 cgdisk （GUI界面）或 gdisk （命令行界面）对相关磁盘进行分区（请自选对应磁盘）cgdisk /dev/nvme0n1gdisk /dev/sda# 再次查看磁盘及其分区情况lsblk -f# 确定好磁盘分区，开始对分区进行格式化我们对 /dev/nvme0n1p1 格式化为vfat文件系统(/boot 分区)我们对 /dev/nvme0n1p2 格式化为交换分区(交换分区)我们对 /dev/nvme0n1p3 格式化为xfs文件系统(根目录/)我们对 /dev/nvme0n1p4 格式化为xfs文件系统(/home 分区)mkfs.vfat /dev/nvme0n1p1mkswap /dev/nvme0n1p2mkfs.xfs /dev/nvme0n1p3mkfs.xfs /dev/nvme0n1p4# 最后检查磁盘分区，确认分区完毕lsblk -f# 挂载磁盘到 Live CD 内存中mount /dev/mvne0n1p3 /mnt# 建立boot，home挂载点mkdir /mnt/boot &amp; mkdir /mnt/home# 挂载磁盘相关分区到boot，home文件夹中mount /dev/nvme0n1p1 /mnt/boot &amp; mount /dev/nvme0n1p4 /mnt/home# 挂载交换分区swapon /dev/nvme0n1p2 安装 Linux 内核以及必须的软件包和元软件包12345# 安装 base 元软件包、base-devel软件包组、 Linux 内核以及常规硬件的固件和有线/无线网络工具，Btrfs、VFAT、exFAT、ext、NTFS、XFS文件系统管理工具pacstrap /mnt base base-devel linux linux-firmware dhcpcd iwd btrfs-progs dosfstools exfat-utils e2fsprogs ntfs-3g xfsprogs gdisk 初步配置已安装系统1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# 配置fstab文件genfstab -U /mnt &gt;&gt; /mnt/etc/fstab# Change rootarch-chroot /mnt# 安装文本编辑器nano、vim访问 man 和 info 页面的工具联网所需要的程序pacman -S nano vim man-db man-pages dialog wpa_supplicant networkmanager netctl# 设置时区为上海时区ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime# 设置时间标准为 UTC 并调整时间偏移hwclock --systohc --utc# 本地化过程1vim /etc/locale.gen- - - - - - - - - - - - - - - -删除对应地区和编码格式前的#号# 更新所做出的更改locale-gen# 本地化过程2vim /etc/locale.conf- - - - - - - - - - - - - - - - 在locale.conf中添加如下文本LANG=en_US.UTF-8LC_CTYPE=&quot;en_US.UTF-8&quot;LC_NUMERIC=CLC_TIME=zh_CN.UTF-8LC_COLLATE=CLC_MONETARY=zh_CN.UTF-8LC_MESSAGES=&quot;en_US.UTF-8&quot;LC_PAPER=&quot;en_US.UTF-8&quot;LC_NAME=&quot;en_US.UTF-8&quot;LC_ADDRESS=&quot;en_US.UTF-8&quot;LC_TELEPHONE=&quot;en_US.UTF-8&quot;LC_MEASUREMENT=zh_CN.UTF-8LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;LC_ALL=# 设置主机名（替换myhostname）vim /etc/hostname- - - - - - - - - - - - - - - -在locale.conf中添加如下文本myhostname# 设置hosts文件（替换myhostname）vim /etc/hosts- - - - - - - - - - - - - - - -在hosts中添加如下文本127.0.0.1 localhost::1 localhost127.0.1.1 myhostname.localdomain myhostname# 修改root密码passwd 安装和配置引导程序关于 GRUB 的2.06更新的一点改变： 如果您正在使用 os-prober 生成其他系统的引导项，grub 2.06 不再自动启用 os-prober，您需要添加 GRUB_DISABLE_OS_PROBER&#x3D;false 至 &#x2F;etc&#x2F;default&#x2F;grub 配置文件中并且重新运行 grub-mkconfig grub 2.06 现在会自动添加 固件设置菜单（ BIOS ） 引导项目，无需手动创建 1234567891011121314151617181920212223242526272829303132# 安装CPU微码（根据具体CPU品牌进行选择）pacman -S amd-ucodepacman -S intel-ucode# 安装多系统工具 os-prober 和EFI启动管理工具pacman -S os-prober efibootmgr# 安装启动引导程序 gurb2pacman -S grub# 禁用 grub 的禁用 os-prober 功能vim /etc/default/grub - - - - - - - - - - - - - - - -添加如下文本GRUB_DISABLE_OS_PROBER=false# 配置 grub （此为 grub 在UEFI模式下的配置）grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB --recheckgrub-install --target=x86_64-efi --efi-directory=/boot --recheck# 更新并储存 grub 配置grub-mkconfig -o /boot/grub/grub.cfg# 退出磁盘系统下的 root 用户exit# 卸载挂载点umount -R /mnt# 重启reboot 到此位置我们已经完成安装了 Arch Linux 的安装。 那么，接下来，我们要开始对完善我们所安装的系统。 有时候，因为 Windows Boot Manager （Windows系统启动管理器）的强势性，即使在正确配置好了启动引导程序后，可能也不会自动引导进 GRUB 中。所以有时候我们还需在主板 BIOS 设置中，在 启动 选项中选择磁盘中已经安装并配置好的 grub 的引导程序并保存。 完善已安装的系统123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161&gt; 设置 sudo 并添加新用户# 替换 vi 编辑器 为 vim ln -s /usr/bin/vim /usr/bin/vi# visudo- - - - - - - - - - - - - - - -找到该行，去掉 %wheel 前的注释符号 # （百分号保留） ## Uncomment to allow members of group wheel to execute any command # %wheel ALL=(ALL) ALL# 添加新用户并加进wheel用户组 （替换 user 为你喜欢的用户名）useradd -m -G wheel user# 为 user 设置密码passwd user# 切换到个人所创建的用户,并且以后默认使用该用户进行系统操作su user&gt; 配置桌面环境# 安装软件包组 xorg pacman -S xorg# 安装 wayland 和 wayland 的 xorg 兼容pacman -S wayland xorg-xwayland# 安装各个图形库的 wayland 支持（qt5，qt6，glfw，glew）pacman -S qt5-wayland qt6-wayland glfw-wayland glew-wayland # 安装显示管理器 SDDMpacman -S sddm# SDDM 若要强制启动小键盘vim /etc/sddm.conf.d/- - - - - - - - - - - - - - - -修改 Numlock 为 on（选项有 on off none）[General]Numlock=on// SDDM 不会显示 root 用户的登录界面，所以要在使用 SDDM 之前创建一个非 root 用户# 安装 Plasma 桌面、 KDE 应用和 Wayland 的KDE支持pacman -S plasma kde-applications plasma-wayland-session# 设置相关服务开机自启禁用系统自带的网络服务systemctl disable netctl启用显示管理器 SDDMsystemctl enable sddm启动桌面环境用的网络管理systemctl enable NetworkManager&gt; 配置 Nvidia 显卡驱动(如果你有N卡的话，而且在显卡型号不会太老的情况)# pacman -S nvidia nvidia-utils nvidia-settingscat /sys/module/nvidia_drm/parameters/modesetvim /etc/mkinitcpio.conf- MODULES=()+ MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)# 要在 wayland 下使用 Nvidia 显卡，需要给 Linux 内核传递 Nvidia 的 Direct Rendering Manager Kernel Mode 参数（不然就黑屏了）sudo vim /etc/default/grub- - - - - - - - - - - - - - - -在该行的参数内添加 nvidia-drm.modeset=1 如下- GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;+ GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash nvidia-drm.modeset=1&quot;# 重新生成 grub.cfg 文件grub-mkconfig -o /boot/grub/grub.cfg# 完成配置，重启reboot&gt; 配置蓝牙并自启动蓝牙服务# pacman -S bluez bluez-utils# systemctl enable bluetooth.service# vim /etc/bluetooth/main.conf- - - - - - - - - - - - - - - -若要蓝牙开机后自动启动，false 修改为 true，如下[Policy]- # AutoEnable=false+ AutoEnable=true&gt; 安装版本控制工具 Git 和第三方软件包管理器 yay$ sudo pacman -S git$ mkdir ~/builds &amp; cd ~/builds$ git clone https://aur.archlinux.org/yay.git$ cd yay$ makepkg -si&gt; 本地化过程3$ 安装中文字体(注意这里已经使用普通用户了)Google Noto Fonts 系列yay -S noto-fonts noto-fonts-cjk noto-fonts-emoji思源黑体yay -S adobe-source-han-sans-otc-fonts文泉驿正黑和微米黑yay -S wqy-zenhei wqy-microhei更纱黑体yay -S ttf-sarasa-gothic&gt; 安装并使用 Z shell(zsh) 和第三方zsh框架 oh my zsh$ yay -S zsh$ 初始配置 zsh 获取配置文件zsh $ 列出已安装的 shell 路径chsh -l$ 若要改变默认 shell ,改变以下 shell 路径即可chsh -s /bin/zsh$ 执行官方安装 oh my zsh 脚本(oh my zsh 会自动更新,无需担心后续的版本更新问题)sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;$ 在桌面环境下使用我个人比较喜欢的 Agnoster 主题 （终端环境我推荐使用 ys 主题）vim ~/.zshrc- - - - - - - - - - - - - - - -修改配置为ZSH_THEME=&quot;agnoster&quot;$ 立即更新配置source ~/.zshrc&gt; 安装和配置中文输入法 fcitx5$ 安装软件包 fcitx5yay -S fcitx5$ 安装输入法引擎 rimeyay -S fcitx5-rime$ 安装对 Qt 和 GTK 程序的支持输入法模块yay -S fcitx5-qt fcitx5-gtk# 配置环境变量vim /etc/environment- - - - - - - - - - - - - - - -添加如下文本后并重新登录(注销用户)GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxGLFW_IM_MODULE=fcitx SDL_IM_MODULE=fcitxXMODIFIERS=@im=fcitx//使用 ~/.pam_environment 配置的环境变量，现已不再推荐使用$ 安装适用于 Rime 的中文维基词库yay -S fcitx5-pinyin-zhwiki-rime$ 安装炫酷的 material 主题yay -S fcitx5-material-color- - - - - - - - - - - - - - - -从 KDE 桌面程序启动器进入 fcitx5 的配置菜单：主题选择 Fcitx5 - 附加组件 - 经典用户界面 另外在 Fcitx5 - 中州韻 中可以配置输入法的外观，可以根据自己选择勾选 []同时在程序中显示预编辑文本编辑 进行到这里，系统可以说是能够正常使用的状态了。接下来是一些常用软件的安装和注意事项。 个人常用软件安装和配置Visual Studio Code12345678910111213141516171819202122232425262728293031323334$ 安装微软构建版本 Visual Studio Code 和一个 KDE 的补丁yay -S visual-studio-code-binyay -S libdbusmenu-glib //因为 KDE 和 VScode 在密码管理方面的不兼容（截至2021-09-05），现在无法使用 GitHub 登录 VScode 。需要使用其他平台的密码管理器，现有两种方法解决此问题或是等待 VScode 或 KWallet 解决此问题。一.安装 gnome 的密码管理器，即可解决1.安装 gnome 密码管理器和其图形前端yay -S gnome-keyring seahorse2.添加默认密钥环时，密码与 linux 用户密码相同，这样只需在用户登录 linux 系统时输入一次密码二.使用 KeePassXC 作为 Secrets Service1.安装 libsecret 和 KeePassXCyay -S libsecret keepassxc2.从 KDE 桌面程序启动器启动 KeePassXC 3.新建一个数据库，名称随意，密码自行设置4.群组-新建群组，名称推荐为 Secret-Service-Integration ，配置默认5.工具-设置-（应用程序设置）保密服务集成。勾选 在 KeepassXC 中启用 Freedesktop.org 保密服务集成 6.工具-设置-（应用程序设置）保密服务集成-常规-已公开的数据库群组。点击刚刚创建的数据库文件右边 管理 栏目下的铅笔图标7.保密服务集成-公开条目。勾选 公开此群组下的条目8.完成设置，现在 VScode 可正常登录 GitHub9.注意，使用 KeePassXC 时应保持密码数据库处于解锁状态（截至2021-09-05 本人暂无发现无其他更好的方案能与方法一一样无需额外输入密码）目前在 Wayland 环境下 VScode 仍然默认使用 XWayland ，若要原生使用 Waylang VScode 则使用命令行传递参数启动 code 即可code --enable-features=UseOzonePlatform --ozone-platform=waylandArch Wiki 下的方法传递参数好像并不能启动原生 Wayland 但是仍然在这里贴出$ vim ~/.config/electron-flags.conf- - - - - - - - - - - - - - - -添加如下文本--enable-features=UseOzonePlatform--ozone-platform=wayland Google Chrome12345$ vim ~/.config/chrome-flags.conf- - - - - - - - - - - - - - - ---enable-features=UseOzonePlatform--ozone-platform=wayland TO BE CONTINUED1234yay -S mlocatesudo updatedbyay -S google-chrome onedrive-abrauneggreboot 1 12345678vim /etc/pacman.confyay -S android-sdk android-sdk-platform-tools android-sdk-build-tools libmtp aosp-develgroupadd sdkusersgpasswd -a &lt;user&gt; sdkuserschown -R :sdkusers /opt/android-sdkchmod -R g+w /opt/android-sdknewgrp sdkusersreboot 1yay -S nodejs npm 1yay -S","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/Linux/"},{"name":"使用小计","slug":"使用小计","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%A1/"}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/"}]},{"title":"ML的时候,软件中心提示非法?","date":"2021-01-26T14:59:38.000Z","path":"wiki/路由器/华硕/ML的时候-软件中心提示非法/","text":"作为一名科学上网er，在中文环境下最喜欢用的就是ASUS路由器的路由器端科学上网了。又方便、又可以对NAT下的设备进行相关的控制。 这里要感谢我们的前辈! 但是由于不可抗力，我们在路由器端安装小飞机的时候，会提示含有非法关键词。这时候我们无奈的前辈给出了解决方法 提示1： 如果提示检测到离线安装包名有非法关键词，开启路由器的SSH功能，登录并输入以下命令后，再进行离线安装。(arm380&#x2F;X7.x版本固件需要请将软件中心更新到1.4.8及以上) 1sed -i &#x27;s/\\tdetect_package/\\t# detect_package/g&#x27; /koolshare/scripts/ks_tar_install.sh 这时候，我们就可以继续进行科学上网的相关操作了！ 参考资料 有关插件 KS论坛 ML官网","tags":[{"name":"科学上网","slug":"科学上网","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"categories":[{"name":"路由器","slug":"路由器","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"华硕","slug":"路由器/华硕","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/%E5%8D%8E%E7%A1%95/"}]},{"title":"Udpspeeder加Udp2raw个人使用模板","date":"2021-01-26T13:49:06.000Z","path":"wiki/路由器/华硕/Udpspeeder加Udp2raw个人使用模板/","text":"Udpspeeder服务端:123456请逐行执行,并自行修改相关内容# mkdir /root/udpspeeder# cd /root/udpspeeder# wget https://github.com/wangyu-/UDPspeeder/releases/*自己选择最新版本*# tar -zxf speederv2_binaries.tar.gz# ./speederv2_amd64 -s -l0.0.0.0:4096 -r127.0.0.1:48989 -f10:10 -k &quot;password&quot; --mode 0 --timeout 3 配置介绍 _amd64 架构 4096 sever端口 48989 ss端口 -f10:10 发包参数 使用经验 “password” 密码 -q1 路由器clinet其它参数 客户端 服务器地址 ：端口127.0.0.1 : 1093 设置fec参数 设置timeout参数 Udp2raw服务端12345请逐行执行,并自行修改相关内容# mkdir /root/udp2raw# cd /root/udp2raw# tar -zxf udp2raw_binaries.tar.gz# wget https://github.com/wangyu-/udp2raw-tunnel/releases/*自己选择最新版本* 配置介绍 _amd64 架构 4097 sever 端口 4096 Udpsever 端口 “password” 密码 注意搭建Kcptun时mtu推荐为1200 客户端 服务器地址 ：端口vps ip : 4097 设置开机俩服务自启(Debian系统) 前置条件 1# vim /etc/rc.local vim使用 123# ./root/udpspeeder/speederv2_amd64 -s -l0.0.0.0:4096 -r127.0.0.1:48989 -f10:10 -k &quot;password&quot; --mode 0 --timeout 3 &amp;# ./root//udp2raw/udp2raw_amd64 -s -l0.0.0.0:4097 -r127.0.0.1:4096 -a -k &quot;password&quot; --raw-mode faketcp &amp; 在Vim插入模式下使用Shift + INS键进行粘贴操作 The END.","tags":[{"name":"科学上网","slug":"科学上网","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"categories":[{"name":"路由器","slug":"路由器","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"华硕","slug":"路由器/华硕","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/%E5%8D%8E%E7%A1%95/"}]},{"title":"About Me","date":"2021-01-25T16:00:00.000Z","path":"wiki/uncategorized/about/","text":"KONODIODA!","tags":[],"categories":[]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/"},{"name":"OpenWRT","slug":"Linux/OpenWRT","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/Linux/OpenWRT/"},{"name":"路由器","slug":"路由器","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"华硕","slug":"路由器/华硕","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/%E5%8D%8E%E7%A1%95/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/Linux/"},{"name":"Samba","slug":"Samba","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/Samba/"},{"name":"树莓派","slug":"树莓派","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"使用小计","slug":"使用小计","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%A1/"},{"name":"科学上网","slug":"科学上网","permalink":"https://github.com/Sunshine-Planet/Sunshine-Planet.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]}